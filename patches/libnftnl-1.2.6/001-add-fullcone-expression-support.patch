diff --git a/include/libnftnl/expr.h b/include/libnftnl/expr.h
index 9873228..22c42cf 100644
--- a/include/libnftnl/expr.h
+++ b/include/libnftnl/expr.h
@@ -244,6 +244,12 @@ enum {
 	NFTNL_EXPR_MASQ_REG_PROTO_MAX,
 };
 
+enum {
+	NFTNL_EXPR_FULLCONE_FLAGS		= NFTNL_EXPR_BASE,
+	NFTNL_EXPR_FULLCONE_REG_PROTO_MIN,
+	NFTNL_EXPR_FULLCONE_REG_PROTO_MAX,
+};
+
 enum {
 	NFTNL_EXPR_REDIR_REG_PROTO_MIN	= NFTNL_EXPR_BASE,
 	NFTNL_EXPR_REDIR_REG_PROTO_MAX,
diff --git a/include/linux/netfilter/nf_tables.h b/include/linux/netfilter/nf_tables.h
index c48b193..9d32b3e 100644
--- a/include/linux/netfilter/nf_tables.h
+++ b/include/linux/netfilter/nf_tables.h
@@ -1463,6 +1463,22 @@ enum nft_masq_attributes {
 };
 #define NFTA_MASQ_MAX		(__NFTA_MASQ_MAX - 1)
 
+/**
+ * enum nft_fullcone_attributes - nf_tables fullcone expression attributes
+ *
+ * @NFTA_FULLCONE_FLAGS: NAT flags (see NF_NAT_RANGE_* in linux/netfilter/nf_nat.h) (NLA_U32)
+ * @NFTA_FULLCONE_REG_PROTO_MIN: source register of proto range start (NLA_U32: nft_registers)
+ * @NFTA_FULLCONE_REG_PROTO_MAX: source register of proto range end (NLA_U32: nft_registers)
+ */
+enum nft_fullcone_attributes {
+	NFTA_FULLCONE_UNSPEC,
+	NFTA_FULLCONE_FLAGS,
+	NFTA_FULLCONE_REG_PROTO_MIN,
+	NFTA_FULLCONE_REG_PROTO_MAX,
+	__NFTA_FULLCONE_MAX
+};
+#define NFTA_FULLCONE_MAX		(__NFTA_FULLCONE_MAX - 1)
+
 /**
  * enum nft_redir_attributes - nf_tables redirect expression netlink attributes
  *
diff --git a/src/Makefile.am b/src/Makefile.am
index 3cd259c..b98dfb5 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -55,6 +55,7 @@ libnftnl_la_SOURCES = utils.c		\
 		      expr/target.c	\
 		      expr/tunnel.c	\
 		      expr/masq.c	\
+		      expr/fullcone.c	\
 		      expr/redir.c	\
 		      expr/hash.c	\
 		      expr/socket.c	\
diff --git a/src/Makefile.in b/src/Makefile.in
index 03130f7..1f9563d 100644
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -144,11 +144,11 @@ am_libnftnl_la_OBJECTS = utils.lo batch.lo flowtable.lo common.lo \
 	expr/match.lo expr/meta.lo expr/numgen.lo expr/nat.lo \
 	expr/tproxy.lo expr/objref.lo expr/payload.lo expr/queue.lo \
 	expr/quota.lo expr/reject.lo expr/rt.lo expr/target.lo \
-	expr/tunnel.lo expr/masq.lo expr/redir.lo expr/hash.lo \
-	expr/socket.lo expr/synproxy.lo expr/osf.lo expr/xfrm.lo \
-	obj/counter.lo obj/ct_helper.lo obj/quota.lo obj/tunnel.lo \
-	obj/limit.lo obj/synproxy.lo obj/ct_timeout.lo obj/secmark.lo \
-	obj/ct_expect.lo
+	expr/tunnel.lo expr/masq.lo expr/fullcone.lo expr/redir.lo \
+	expr/hash.lo expr/socket.lo expr/synproxy.lo expr/osf.lo \
+	expr/xfrm.lo obj/counter.lo obj/ct_helper.lo obj/quota.lo \
+	obj/tunnel.lo obj/limit.lo obj/synproxy.lo obj/ct_timeout.lo \
+	obj/secmark.lo obj/ct_expect.lo
 libnftnl_la_OBJECTS = $(am_libnftnl_la_OBJECTS)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
@@ -186,25 +186,25 @@ am__depfiles_remade = ./$(DEPDIR)/batch.Plo ./$(DEPDIR)/chain.Plo \
 	expr/$(DEPDIR)/data_reg.Plo expr/$(DEPDIR)/dup.Plo \
 	expr/$(DEPDIR)/dynset.Plo expr/$(DEPDIR)/exthdr.Plo \
 	expr/$(DEPDIR)/fib.Plo expr/$(DEPDIR)/flow_offload.Plo \
-	expr/$(DEPDIR)/fwd.Plo expr/$(DEPDIR)/hash.Plo \
-	expr/$(DEPDIR)/immediate.Plo expr/$(DEPDIR)/inner.Plo \
-	expr/$(DEPDIR)/last.Plo expr/$(DEPDIR)/limit.Plo \
-	expr/$(DEPDIR)/log.Plo expr/$(DEPDIR)/lookup.Plo \
-	expr/$(DEPDIR)/masq.Plo expr/$(DEPDIR)/match.Plo \
-	expr/$(DEPDIR)/meta.Plo expr/$(DEPDIR)/nat.Plo \
-	expr/$(DEPDIR)/numgen.Plo expr/$(DEPDIR)/objref.Plo \
-	expr/$(DEPDIR)/osf.Plo expr/$(DEPDIR)/payload.Plo \
-	expr/$(DEPDIR)/queue.Plo expr/$(DEPDIR)/quota.Plo \
-	expr/$(DEPDIR)/range.Plo expr/$(DEPDIR)/redir.Plo \
-	expr/$(DEPDIR)/reject.Plo expr/$(DEPDIR)/rt.Plo \
-	expr/$(DEPDIR)/socket.Plo expr/$(DEPDIR)/synproxy.Plo \
-	expr/$(DEPDIR)/target.Plo expr/$(DEPDIR)/tproxy.Plo \
-	expr/$(DEPDIR)/tunnel.Plo expr/$(DEPDIR)/xfrm.Plo \
-	obj/$(DEPDIR)/counter.Plo obj/$(DEPDIR)/ct_expect.Plo \
-	obj/$(DEPDIR)/ct_helper.Plo obj/$(DEPDIR)/ct_timeout.Plo \
-	obj/$(DEPDIR)/limit.Plo obj/$(DEPDIR)/quota.Plo \
-	obj/$(DEPDIR)/secmark.Plo obj/$(DEPDIR)/synproxy.Plo \
-	obj/$(DEPDIR)/tunnel.Plo
+	expr/$(DEPDIR)/fullcone.Plo expr/$(DEPDIR)/fwd.Plo \
+	expr/$(DEPDIR)/hash.Plo expr/$(DEPDIR)/immediate.Plo \
+	expr/$(DEPDIR)/inner.Plo expr/$(DEPDIR)/last.Plo \
+	expr/$(DEPDIR)/limit.Plo expr/$(DEPDIR)/log.Plo \
+	expr/$(DEPDIR)/lookup.Plo expr/$(DEPDIR)/masq.Plo \
+	expr/$(DEPDIR)/match.Plo expr/$(DEPDIR)/meta.Plo \
+	expr/$(DEPDIR)/nat.Plo expr/$(DEPDIR)/numgen.Plo \
+	expr/$(DEPDIR)/objref.Plo expr/$(DEPDIR)/osf.Plo \
+	expr/$(DEPDIR)/payload.Plo expr/$(DEPDIR)/queue.Plo \
+	expr/$(DEPDIR)/quota.Plo expr/$(DEPDIR)/range.Plo \
+	expr/$(DEPDIR)/redir.Plo expr/$(DEPDIR)/reject.Plo \
+	expr/$(DEPDIR)/rt.Plo expr/$(DEPDIR)/socket.Plo \
+	expr/$(DEPDIR)/synproxy.Plo expr/$(DEPDIR)/target.Plo \
+	expr/$(DEPDIR)/tproxy.Plo expr/$(DEPDIR)/tunnel.Plo \
+	expr/$(DEPDIR)/xfrm.Plo obj/$(DEPDIR)/counter.Plo \
+	obj/$(DEPDIR)/ct_expect.Plo obj/$(DEPDIR)/ct_helper.Plo \
+	obj/$(DEPDIR)/ct_timeout.Plo obj/$(DEPDIR)/limit.Plo \
+	obj/$(DEPDIR)/quota.Plo obj/$(DEPDIR)/secmark.Plo \
+	obj/$(DEPDIR)/synproxy.Plo obj/$(DEPDIR)/tunnel.Plo
 am__mv = mv -f
 COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
 	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
@@ -456,6 +456,7 @@ libnftnl_la_SOURCES = utils.c		\
 		      expr/target.c	\
 		      expr/tunnel.c	\
 		      expr/masq.c	\
+		      expr/fullcone.c	\
 		      expr/redir.c	\
 		      expr/hash.c	\
 		      expr/socket.c	\
@@ -583,6 +584,7 @@ expr/rt.lo: expr/$(am__dirstamp) expr/$(DEPDIR)/$(am__dirstamp)
 expr/target.lo: expr/$(am__dirstamp) expr/$(DEPDIR)/$(am__dirstamp)
 expr/tunnel.lo: expr/$(am__dirstamp) expr/$(DEPDIR)/$(am__dirstamp)
 expr/masq.lo: expr/$(am__dirstamp) expr/$(DEPDIR)/$(am__dirstamp)
+expr/fullcone.lo: expr/$(am__dirstamp) expr/$(DEPDIR)/$(am__dirstamp)
 expr/redir.lo: expr/$(am__dirstamp) expr/$(DEPDIR)/$(am__dirstamp)
 expr/hash.lo: expr/$(am__dirstamp) expr/$(DEPDIR)/$(am__dirstamp)
 expr/socket.lo: expr/$(am__dirstamp) expr/$(DEPDIR)/$(am__dirstamp)
@@ -646,6 +648,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@expr/$(DEPDIR)/exthdr.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@expr/$(DEPDIR)/fib.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@expr/$(DEPDIR)/flow_offload.Plo@am__quote@ # am--include-marker
+@AMDEP_TRUE@@am__include@ @am__quote@expr/$(DEPDIR)/fullcone.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@expr/$(DEPDIR)/fwd.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@expr/$(DEPDIR)/hash.Plo@am__quote@ # am--include-marker
 @AMDEP_TRUE@@am__include@ @am__quote@expr/$(DEPDIR)/immediate.Plo@am__quote@ # am--include-marker
@@ -882,6 +885,7 @@ distclean: distclean-am
 	-rm -f expr/$(DEPDIR)/exthdr.Plo
 	-rm -f expr/$(DEPDIR)/fib.Plo
 	-rm -f expr/$(DEPDIR)/flow_offload.Plo
+	-rm -f expr/$(DEPDIR)/fullcone.Plo
 	-rm -f expr/$(DEPDIR)/fwd.Plo
 	-rm -f expr/$(DEPDIR)/hash.Plo
 	-rm -f expr/$(DEPDIR)/immediate.Plo
@@ -992,6 +996,7 @@ maintainer-clean: maintainer-clean-am
 	-rm -f expr/$(DEPDIR)/exthdr.Plo
 	-rm -f expr/$(DEPDIR)/fib.Plo
 	-rm -f expr/$(DEPDIR)/flow_offload.Plo
+	-rm -f expr/$(DEPDIR)/fullcone.Plo
 	-rm -f expr/$(DEPDIR)/fwd.Plo
 	-rm -f expr/$(DEPDIR)/hash.Plo
 	-rm -f expr/$(DEPDIR)/immediate.Plo
diff --git a/src/expr/fullcone.c b/src/expr/fullcone.c
new file mode 100644
index 0000000..186c307
--- /dev/null
+++ b/src/expr/fullcone.c
@@ -0,0 +1,167 @@
+/*
+ * (C) 2022 wongsyrone
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published
+ * by the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <stdio.h>
+#include <stdint.h>
+#include <arpa/inet.h>
+#include <errno.h>
+#include <inttypes.h>
+
+#include <linux/netfilter/nf_tables.h>
+
+#include "internal.h"
+#include <libmnl/libmnl.h>
+#include <libnftnl/expr.h>
+#include <libnftnl/rule.h>
+
+struct nftnl_expr_fullcone {
+	uint32_t		flags;
+	enum nft_registers	sreg_proto_min;
+	enum nft_registers	sreg_proto_max;
+};
+
+static int
+nftnl_expr_fullcone_set(struct nftnl_expr *e, uint16_t type,
+		       const void *data, uint32_t data_len)
+{
+	struct nftnl_expr_fullcone *fullcone = nftnl_expr_data(e);
+
+	switch (type) {
+	case NFTNL_EXPR_FULLCONE_FLAGS:
+		memcpy(&fullcone->flags, data, sizeof(fullcone->flags));
+		break;
+	case NFTNL_EXPR_FULLCONE_REG_PROTO_MIN:
+		memcpy(&fullcone->sreg_proto_min, data, sizeof(fullcone->sreg_proto_min));
+		break;
+	case NFTNL_EXPR_FULLCONE_REG_PROTO_MAX:
+		memcpy(&fullcone->sreg_proto_max, data, sizeof(fullcone->sreg_proto_max));
+		break;
+	default:
+		return -1;
+	}
+	return 0;
+}
+
+static const void *
+nftnl_expr_fullcone_get(const struct nftnl_expr *e, uint16_t type,
+		       uint32_t *data_len)
+{
+	struct nftnl_expr_fullcone *fullcone = nftnl_expr_data(e);
+
+	switch (type) {
+	case NFTNL_EXPR_FULLCONE_FLAGS:
+		*data_len = sizeof(fullcone->flags);
+		return &fullcone->flags;
+	case NFTNL_EXPR_FULLCONE_REG_PROTO_MIN:
+		*data_len = sizeof(fullcone->sreg_proto_min);
+		return &fullcone->sreg_proto_min;
+	case NFTNL_EXPR_FULLCONE_REG_PROTO_MAX:
+		*data_len = sizeof(fullcone->sreg_proto_max);
+		return &fullcone->sreg_proto_max;
+	}
+	return NULL;
+}
+
+static int nftnl_expr_fullcone_cb(const struct nlattr *attr, void *data)
+{
+	const struct nlattr **tb = data;
+	int type = mnl_attr_get_type(attr);
+
+	if (mnl_attr_type_valid(attr, NFTA_FULLCONE_MAX) < 0)
+		return MNL_CB_OK;
+
+	switch (type) {
+	case NFTA_FULLCONE_REG_PROTO_MIN:
+	case NFTA_FULLCONE_REG_PROTO_MAX:
+	case NFTA_FULLCONE_FLAGS:
+		if (mnl_attr_validate(attr, MNL_TYPE_U32) < 0)
+			abi_breakage();
+		break;
+	}
+
+	tb[type] = attr;
+	return MNL_CB_OK;
+}
+
+static void
+nftnl_expr_fullcone_build(struct nlmsghdr *nlh, const struct nftnl_expr *e)
+{
+	struct nftnl_expr_fullcone *fullcone = nftnl_expr_data(e);
+
+	if (e->flags & (1 << NFTNL_EXPR_FULLCONE_FLAGS))
+		mnl_attr_put_u32(nlh, NFTA_FULLCONE_FLAGS, htobe32(fullcone->flags));
+	if (e->flags & (1 << NFTNL_EXPR_FULLCONE_REG_PROTO_MIN))
+		mnl_attr_put_u32(nlh, NFTA_FULLCONE_REG_PROTO_MIN,
+				 htobe32(fullcone->sreg_proto_min));
+	if (e->flags & (1 << NFTNL_EXPR_FULLCONE_REG_PROTO_MAX))
+		mnl_attr_put_u32(nlh, NFTA_FULLCONE_REG_PROTO_MAX,
+				 htobe32(fullcone->sreg_proto_max));
+}
+
+static int
+nftnl_expr_fullcone_parse(struct nftnl_expr *e, struct nlattr *attr)
+{
+	struct nftnl_expr_fullcone *fullcone = nftnl_expr_data(e);
+	struct nlattr *tb[NFTA_FULLCONE_MAX+1] = {};
+
+	if (mnl_attr_parse_nested(attr, nftnl_expr_fullcone_cb, tb) < 0)
+		return -1;
+
+	if (tb[NFTA_FULLCONE_FLAGS]) {
+		fullcone->flags = be32toh(mnl_attr_get_u32(tb[NFTA_FULLCONE_FLAGS]));
+		e->flags |= (1 << NFTNL_EXPR_FULLCONE_FLAGS);
+        }
+	if (tb[NFTA_FULLCONE_REG_PROTO_MIN]) {
+		fullcone->sreg_proto_min =
+			be32toh(mnl_attr_get_u32(tb[NFTA_FULLCONE_REG_PROTO_MIN]));
+		e->flags |= (1 << NFTNL_EXPR_FULLCONE_REG_PROTO_MIN);
+	}
+	if (tb[NFTA_FULLCONE_REG_PROTO_MAX]) {
+		fullcone->sreg_proto_max =
+			be32toh(mnl_attr_get_u32(tb[NFTA_FULLCONE_REG_PROTO_MAX]));
+		e->flags |= (1 << NFTNL_EXPR_FULLCONE_REG_PROTO_MAX);
+	}
+
+	return 0;
+}
+
+static int nftnl_expr_fullcone_snprintf(char *buf, size_t remain,
+				    uint32_t flags, const struct nftnl_expr *e)
+{
+	struct nftnl_expr_fullcone *fullcone = nftnl_expr_data(e);
+	int offset = 0, ret = 0;
+
+	if (e->flags & (1 << NFTNL_EXPR_FULLCONE_REG_PROTO_MIN)) {
+		ret = snprintf(buf + offset, remain, "proto_min reg %u ",
+			       fullcone->sreg_proto_min);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+	if (e->flags & (1 << NFTNL_EXPR_FULLCONE_REG_PROTO_MAX)) {
+		ret = snprintf(buf + offset, remain, "proto_max reg %u ",
+			       fullcone->sreg_proto_max);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+	if (e->flags & (1 << NFTNL_EXPR_FULLCONE_FLAGS)) {
+		ret = snprintf(buf + offset, remain, "flags 0x%x ", fullcone->flags);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+
+	return offset;
+}
+
+struct expr_ops expr_ops_fullcone = {
+	.name		= "fullcone",
+	.alloc_len	= sizeof(struct nftnl_expr_fullcone),
+	.max_attr	= NFTA_FULLCONE_MAX,
+	.set		= nftnl_expr_fullcone_set,
+	.get		= nftnl_expr_fullcone_get,
+	.parse		= nftnl_expr_fullcone_parse,
+	.build		= nftnl_expr_fullcone_build,
+	.output 	= nftnl_expr_fullcone_snprintf,
+};
diff --git a/src/expr_ops.c b/src/expr_ops.c
index b85f472..bfbca64 100644
--- a/src/expr_ops.c
+++ b/src/expr_ops.c
@@ -20,6 +20,7 @@ extern struct expr_ops expr_ops_limit;
 extern struct expr_ops expr_ops_log;
 extern struct expr_ops expr_ops_lookup;
 extern struct expr_ops expr_ops_masq;
+extern struct expr_ops expr_ops_fullcone;
 extern struct expr_ops expr_ops_match;
 extern struct expr_ops expr_ops_meta;
 extern struct expr_ops expr_ops_ng;
@@ -65,6 +66,7 @@ static struct expr_ops *expr_ops[] = {
 	&expr_ops_log,
 	&expr_ops_lookup,
 	&expr_ops_masq,
+	&expr_ops_fullcone,
 	&expr_ops_match,
 	&expr_ops_meta,
 	&expr_ops_ng,
