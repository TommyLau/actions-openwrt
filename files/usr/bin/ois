#!/bin/sh
# OpenWrt Init Script
# Version 0.5.2
# Updated: Oct 26, 2022
# Copyright (C) 2022 Tommy Lau <https://tommy.net.cn/>

# Get encrypted config file from server
URL="https://tommy.net.cn/router/$1.bin"
CUSTOM_JSON="/tmp/$1.json"
CUSTOM_BIN="/tmp/$1.bin"
PRE_CONFIG="/etc/router/$1.bin"

# Search pattern for config file
# 1. /tmp/config_name.json
# 2. /tmp/config_name.bin
# 3. /etc/router/config_name.bin
# 4. https://tommy.net.cn/router/config_name.bin
# 5. /tmp/config.json
# 6. /tmp/config.bin

if [ -z "$1" ]; then
    # Check whether '/tmp/config.json' exist
    if [ ! -s /tmp/config.json ]; then
        # Check whether '/tmp/config.bin' exist
        if [ ! -s /tmp/config.bin ]; then
            # No 'config.bin', 'config.json', nor command line input
            echo -e "\nUsage: $0 [config_name]\n"
            echo -e "\tconfig_name\t\tDefault: /tmp/config.bin or /tmp/config.json\n"
            exit 1
        fi
    else
        USE_JSON=1
    fi
else
    # Use custom json config
    if [ -s "${CUSTOM_JSON}" ]; then
        # Check whether '/tmp/config_name.json' exist and greater than zero
        cp "${CUSTOM_JSON}" /tmp/config.json
        USE_JSON=1
    elif [ -s "${CUSTOM_BIN}" ]; then
        # Check whether '/tmp/config_name.bin' exist
        cp "${CUSTOM_BIN}" /tmp/config.bin
    elif [ -s "${PRE_CONFIG}" ]; then
        # Check whether '/etc/router/config_name.bin' exist
        cp "${PRE_CONFIG}" /tmp/config.bin
    else
        # Get config from Internet
        curl -SL "$URL" -o /tmp/config.bin 2>/dev/null

        if [ ! -s /tmp/config.bin ]; then
            echo -e "\nCannot get config file from '${URL}'\n\nPlease copy config file to '/tmp/config.bin'\n"
            exit 2
        fi
    fi
fi

# Decrypt data to JSON format
if [ -z ${USE_JSON} ]; then
    if [ -z "${PASSWORD}" ]; then
        COMMAND="openssl enc -aes-256-cbc -d < /tmp/config.bin > /tmp/config.json 2> /dev/null"
    else
        COMMAND="openssl enc -aes-256-cbc -d -pass env:PASSWORD < /tmp/config.bin > /tmp/config.json 2> /dev/null"
    fi

    if ! eval ${COMMAND}; then
        echo -e "Cannot decrypt!!!\n"
        exit 3
    fi
fi

# Parse JSON data
JSON=$(cat /tmp/config.json)
NAME=$(echo "${JSON}" | jq -r '.name')
PASSWORD=$(echo "${JSON}" | jq -r '.password')
LAN_IP=$(echo "${JSON}" | jq -r '.lan_ip')

## Optional Data
SSH_KEY=$(echo "${JSON}" | jq -r 'if .ssh_key == null then "" else .ssh_key end')
WIFI_PASSWORD=$(echo "${JSON}" | jq -r 'if .wifi_password == null then .password else .wifi_password end')
SSID_2G=$(echo "${JSON}" | jq -r 'if .ssid_2g == null then .name + "_2G" else .ssid_2g end')
SSID_5G=$(echo "${JSON}" | jq -r 'if .ssid_5g == null then .name else .ssid_5g end')

NEBULA_CA=$(echo "${JSON}" | jq -r 'if .nebula_ca == null then "" else .nebula_ca end')
NEBULA_CRT=$(echo "${JSON}" | jq -r 'if .nebula_crt == null then "" else .nebula_crt end')
NEBULA_KEY=$(echo "${JSON}" | jq -r 'if .nebula_key == null then "" else .nebula_key end')
NEBULA_CFG=$(echo "${JSON}" | jq -r 'if .nebula_config == null then "" else .nebula_config end')

PPPOE_USERNAME=$(echo "${JSON}" | jq -r 'if .pppoe_username == null then "" else .pppoe_username end')
PPPOE_PASSWORD=$(echo "${JSON}" | jq -r 'if .pppoe_password == null then "" else .pppoe_password end')

# ------------------------------------------------------------
# General
# ------------------------------------------------------------

# Name
echo "Setup system for: ${NAME}"
uci set system.@system[0].hostname="${NAME}"

# Setup password
echo -e "${PASSWORD}\n${PASSWORD}" | passwd root 1>/dev/null 2>/dev/null

# ------------------------------------------------------------
# Wi-Fi
# ------------------------------------------------------------

if uci get wireless 2>/dev/null; then
    echo "Setup Wi-Fi: ${SSID_5G} / ${SSID_2G}"

    # Bandwith 40MHz for 2.4G, 160MHz for 5G
    #uci set wireless.radio0.htmode='HT40'
    #uci set wireless.radio1.htmode='HE160'

    # Channel
    uci set wireless.radio0.channel='6'
    uci set wireless.radio1.channel='149'

    # Encryption - WPA2 CCMP (AES) for compatibility
    uci set wireless.default_radio0.encryption='psk2+ccmp'
    uci set wireless.default_radio1.encryption='psk2+ccmp'

    # SSID
    uci set wireless.default_radio0.ssid="${SSID_2G}"
    uci set wireless.default_radio1.ssid="${SSID_5G}"

    # Password
    uci set wireless.default_radio0.key="${WIFI_PASSWORD}"
    uci set wireless.default_radio1.key="${WIFI_PASSWORD}"
fi

# ------------------------------------------------------------
# SSH
# ------------------------------------------------------------
echo "Setup SSH . . ."

# Add public key to authorized_keys
if [ -n "${SSH_KEY}" ]; then
    echo "${SSH_KEY}" | base64 -d >>/etc/dropbear/authorized_keys

    # Disable password login for root
    uci set dropbear.@dropbear[-1].PasswordAuth="off"
    uci set dropbear.@dropbear[-1].RootPasswordAuth="off"
fi

# ------------------------------------------------------------
# Network
# ------------------------------------------------------------

# Lan IP
echo "Setup LAN: ${LAN_IP}"
uci set network.lan.ipaddr="${LAN_IP}"

# ------------------------------------------------------------
# DNS
# ------------------------------------------------------------
echo "Setup local domain & static leasing . . ."

# Local domain
COUNT=0
ADDRESS=$(echo "${JSON}" | jq -r ".addresses[${COUNT}]")
while [ "${ADDRESS}" != "null" ]; do
    uci add_list dhcp.@dnsmasq[0].address="${ADDRESS}"
    COUNT=$(expr $COUNT + 1)
    ADDRESS=$(echo "${JSON}" | jq -r ".addresses[${COUNT}]")
done

# Static leasing
COUNT=0
NAME=$(echo "${JSON}" | jq -r ".static_leases[${COUNT}][0]")
while [ "${NAME}" != "null" ]; do
    MAC=$(echo "${JSON}" | jq -r ".static_leases[${COUNT}][1]")
    IP=$(echo "${JSON}" | jq -r ".static_leases[${COUNT}][2]")

    uci add dhcp host >/dev/null
    uci set dhcp.@host[-1].name="${NAME}"
    uci set dhcp.@host[-1].dns='1'
    uci set dhcp.@host[-1].mac="${MAC}"
    uci set dhcp.@host[-1].ip="${IP}"

    # Next item
    COUNT=$(expr $COUNT + 1)
    NAME=$(echo "${JSON}" | jq -r ".static_leases[${COUNT}][0]")
done

# ------------------------------------------------------------
# Nebula
# ------------------------------------------------------------
if [ -n "${NEBULA_CA}" ]; then
    echo -n "Setup Nebula: "
    mkdir /etc/nebula 2>/dev/null
    NEBULA_CONFIG="/etc/nebula/config.yml"

    echo "${NEBULA_CA}" | base64 -d >/etc/nebula/ca.crt
    echo "${NEBULA_CRT}" | base64 -d >/etc/nebula/host.crt
    echo "${NEBULA_KEY}" | base64 -d >/etc/nebula/host.key
    echo "${NEBULA_CFG}" | base64 -d >${NEBULA_CONFIG}

    parse_yaml() {
        local prefix=$2
        local s='[[:space:]]*' w='[a-zA-Z0-9_-]*' fs="$(echo @ | tr @ '\034' | tr -d '\015')"
        sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
            awk "-F$fs" '{
                indent = length($1)/2;
                vname[indent] = $2;
                for (i in vname) {if (i > indent) {delete vname[i]}}
                if (length($3) > 0) {
                    vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                    printf("%s%s%s=\"%s\"\n", "'$prefix'", vn, $2, $3);
                }
            }'
    }

    eval "$(parse_yaml "${NEBULA_CONFIG}" "yaml_")"

    if [ -n "$(opkg list-installed | grep nebula-proto)" ]; then
        echo "nebula-proto"

        uci set network.${yaml_tun_dev}=interface
        uci set network.${yaml_tun_dev}.proto="nebula"
        uci set network.${yaml_tun_dev}.config_file="${NEBULA_CONFIG}"
    elif [ -n "$(opkg list-installed | grep nebula-service)" ]; then
        echo "nebula-service"

        /etc/init.d/nebula enable
    else
        echo "nebula"

        /etc/init.d/nebula enable
    fi

    # Enable IPv4 UDP/4242 incoming traffic for Nebula
    uci add firewall rule
    uci set firewall.@rule[-1].name='Allow-Nebula'

    # Listen to IPv4 address only
    if [ "${yaml_listen_host}" = "0.0.0.0" ]; then
        uci set firewall.@rule[-1].family='ipv4'
    fi

    uci add_list firewall.@rule[-1].proto='udp'
    uci set firewall.@rule[-1].src='wan'

    # Change port from Nebula config.yml
    if [ ! "${yaml_listen_port}" = "0" ]; then
        uci set firewall.@rule[-1].dest_port="${yaml_listen_port}"
    fi

    uci set firewall.@rule[-1].target='ACCEPT'
fi

# ------------------------------------------------------------
# PPPoE
# ------------------------------------------------------------
echo "Setup PPPoE . . ."

if [ -n "${PPPOE_USERNAME}" ] && [ -n "${PPPOE_PASSWORD}" ]; then
    uci set network.wan.proto='pppoe'
    uci set network.wan.username="${PPPOE_USERNAME}"
    uci set network.wan.password="${PPPOE_PASSWORD}"
    uci set network.wan.ipv6='auto'
fi

# ------------------------------------------------------------
# Save & Reboot
# ------------------------------------------------------------
echo "Save configuration . . ."
uci commit

echo "Reboot"
reboot
